<style>:root{--thrifty-calculator-primary-color: #36474D; --thrifty-calculator-primary-accent-color: #44BEC7; --thrifty-calculator-secondary-color: #333; --thrifty-calculator-background-color: white; --thrifty-calculator-error-color: #b71c1c; --thrifty-calculator-font: 'Lato', sans-serif;}.thrifty-calculators-calculator{font-size: 16px; font-family: var(--thrifty-calculator-font); background-color: var(--thrifty-calculator-background-color); margin: 2em auto; padding: 2em 2em 0; border-radius: 1em; border: 2px solid var(--thrifty-calculator-primary-color); max-width: 600px; clear: both;}.thrifty-calculators-calculator .calculator-input-group{padding: 0;}.thrifty-calculators-calculator div.calculator-title{font-size: 1.75em; margin: 0 0 1em; text-align: center; text-transform: uppercase; background-color: var(--thrifty-calculator-primary-color); border-radius: 0.25em; color: white; padding: 0.25em;}.thrifty-calculators-calculator div.calculator-group-title{background-color: var(--thrifty-calculator-primary-color); margin-bottom: 1em; padding: 0.5em; color: white; text-align: center;}.thrifty-calculators-calculator hr{margin: 2em 0;}.thrifty-calculators-calculator .calculator-input{display: flex; flex-wrap: wrap; margin: 1em 0 0; justify-content: space-between;}.thrifty-calculators-calculator .calculator-input label{flex: 0 0 100%; padding: 0.25em 0; line-height: 2.5; color: var(--thrifty-calculator-secondary-color);}.thrifty-calculators-calculator #rate-group input, .thrifty-calculators-calculator #nper-group input{text-align: right;}.thrifty-calculators-calculator .calculator-input .input-prefix{flex: 0 0 auto; padding: 0.5em; margin: 0 0.25em; line-height: 2em; text-align: right;}.thrifty-calculators-calculator .calculator-input .input-suffix{flex: 0 0 auto; padding: 0.5em; margin: 0 0.25em; line-height: 2em; text-align: right;}.thrifty-calculators-calculator .calculator-input input{flex: 1 0 auto; font-size: 1em; padding: 0.5em; margin: 0 0.25em; background-color: var(--thrifty-calculator-background-color); border: 0.1em solid var(--thrifty-calculator-secondary-color); color: black; border-radius: 0.5em; max-width: 10em; transition: background-color 150ms, border-color 150ms;}@media screen and (min-width: 425px){.thrifty-calculators-calculator .calculator-input label{flex-basis: auto;}.thrifty-calculators-calculator .calculator-input .input-prefix{flex-grow: 1;}.thrifty-calculators-calculator #rate-group label{flex-grow: 1;}.thrifty-calculators-calculator .calculator-input input{flex-grow: 0; flex-basis: 12em;}}@media screen and (min-width: 768px){.thrifty-calculators-calculator .calculator-input input{flex-basis: 20em; max-width: 100%;}}.thrifty-calculators-calculator .calculator-input input:focus, .thrifty-calculators-calculator .calculator-input input:hover{outline: none; background-color: var(--thrifty-calculator-primary-accent-color); border: 0.1em solid var(--thrifty-calculator-primary-color);}.thrifty-calculators-calculator .calculator-input select{flex: 1 1 auto; -webkit-appearance:none; -moz-appearance:none; appearance:none; font-size: 1em; padding: 0.5em; margin: 0 0.25em; border: 0.1em solid var(--thrifty-calculator-secondary-color); color: black; border-radius: 0.5em; max-width: 20em; background-color: var(--thrifty-calculator-background-color); transition: background-color 150ms, border-color 150ms; /* Arrow */ background-image: url('data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.5-12.8z%22%2F%3E%3C%2Fsvg%3E'); background-repeat: no-repeat, repeat; background-position: right .7em top 50%, 0 0; background-size: .65em auto, 100%; cursor: pointer;}.thrifty-calculators-calculator .calculator-input select:focus, .thrifty-calculators-calculator .calculator-input select:hover{outline: none; background-color: var(--thrifty-calculator-primary-accent-color); border: 0.1em solid var(--thrifty-calculator-primary-color);}.thrifty-calculators-calculator input.slider{margin-top: 1em; width: 100%; max-width: 100%;}.thrifty-calculators-calculator .slider{-webkit-appearance: none; appearance: none; height: 0.5em; border-radius: 0.5em; border-color: var(--thrifty-calculator-secondary-color); color: var(--thrifty-calculator-background-color); background: var(--thrifty-calculator-primary-accent-color); outline: none; margin-top: 1em !important; margin-bottom: 1em !important; padding: 0 !important; cursor: pointer;}.thrifty-calculators-calculator .slider::-moz-range-thumb{width: 1.5em; height: 1.5em; border: 0.1em solid var(--thrifty-calculator-primary-color); border-radius: 0.5em; background: var(--thrifty-calculator-primary-color); cursor: pointer; transition: background-color 250ms, border-color: 250ms;}.thrifty-calculators-calculator .slider::-webkit-slider-thumb{-webkit-appearance: none; appearance: none; width: 1.5em; height: 1.5em; border: 0.1em solid var(--thrifty-calculator-primary-color); border-radius: 0.5em; background: var(--thrifty-calculator-primary-color); cursor: pointer; transition: background-color 250ms, border-color: 250ms;}.thrifty-calculators-calculator .slider:focus::-moz-range-thumb, .thrifty-calculators-calculator .slider:hover::-moz-range-thumb{width: 1.5em; height: 1.5em; border: 0.1em solid var(--thrifty-calculator-secondary-color); border-radius: 0.5em; background: var(--thrifty-calculator-primary-color); cursor: pointer;}.thrifty-calculators-calculator .slider:focus::-webkit-slider-thumb, .thrifty-calculators-calculator .slider:hover::-webkit-slider-thumb{-webkit-appearance: none; appearance: none; width: 1.5em; height: 1.5em; border: 0.1em solid var(--thrifty-calculator-secondary-color); border-radius: 0.5em; background: var(--thrifty-calculator-primary-color); cursor: pointer;}.thrifty-calculators-calculator .calculator-result{margin: 2em 0; overflow-x: auto;}.thrifty-calculators-calculator .calculator-highlighted-result{display: block; text-align: center; border: 0.1em solid var(--thrifty-calculator-primary-color); border-radius: 0.5em; padding: 1em; background-color: var(--thrifty-calculator-primary-accent-color);}.thrifty-calculators-calculator .calculator-result .result-value{font-weight: bold;}.thrifty-calculators-calculator .calculator-result .result-error{display: block; text-align: center; border: 0.1em solid var(--thrifty-calculator-error-color); border-radius: 0.5em; padding: 1em; color: var(--thrifty-calculator-error-color);}.thrifty-calculators-calculator h3, .thrifty-calculators-calculator h4, .thrifty-calculators-calculator h5, .thrifty-calculators-calculator h6{text-transform: uppercase;}.thrifty-calculators-calculator h3{font-size: 1.75em;}.thrifty-calculators-calculator h4{font-size: 1.5em;}.thrifty-calculators-calculator h5{font-size: 1.25em;}.thrifty-calculators-calculator h6{font-size: 1.125em;}.thrifty-calculators-calculator input, .thrifty-calculators-calculator p, .thrifty-calculators-calculator li{font-size: 1.0em;}</style><div class="thrifty-calculators-calculator" id="tvm-calculator"> <div class="calculator-title">Time Value of Money Calculator</div><div class="calculator-input-group" id="solve-for-group"> <div class="calculator-input"> <label for="i-want-to-solve-for" id="i-want-to-solve-for-label">I want to solve for</label> <select class="" name="i-want-to-solve-for" id="i-want-to-solve-for"> <option value="pv-group">Present Value (PV)</option> <option value="pmt-group">Payment (PMT)</option> <option value="fv-group">Future Value (FV)</option> <option value="rate-group">Interest Rate (I)</option> <option value="nper-group">Periods (N)</option> </select> </div></div><hr/> <div class="calculator-input-group" id="pv-group"> <div class="calculator-input"> <label for="pv" id="pv-label">Present Value (PV)</label> <span class="input-prefix">$</span> <input type="number" class="currency" name="pv" id="pv" value="204500"/> </div></div><div class="calculator-input-group" id="pmt-group"> <div class="calculator-input"> <label for="pmt" id="pmt-label">Payment (PMT)</label> <span class="input-prefix">$</span> <input type="number" class="currency" name="pmt" id="pmt" value="-1400"/> </div></div><div class="calculator-input-group" id="fv-group"> <div class="calculator-input"> <label for="fv" id="fv-label">Future Value (FV)</label> <span class="input-prefix">$</span> <input type="number" class="currency" name="fv" id="fv" value="0"/> </div></div><div class="calculator-input-group" id="rate-group"> <div class="calculator-input"> <label for="rate" id="rate-label">Period interest rate (I)</label> <input type="number" class="" name="rate" id="rate" value="0.23960225" step="0.001"/> <span class="input-suffix">%</span> </div></div><div class="calculator-input-group" id="nper-group"> <div class="calculator-input"> <label for="nper" id="nper-label">Periods (N)</label> <input type="number" class="" name="nper" id="nper" value="180" step="1"/> </div></div><div class="calculator-result"></div></div><script type="text/javascript">document.addEventListener('DOMContentLoaded', ()=>{console.log("Calculator js running"); function tag(type, value=undefined, klass=undefined, id=undefined){let el=document.createElement(type); if (klass){el.setAttribute('class', klass);}if (id){el.setAttribute('id', id);}if (value){el.innerText=value;}return el;}function baseLog(x, y){return Math.log(x) / Math.log(y);}function toPercent(value, digits=2){if (value==0){return '-%';}else{return (value * 100).toLocaleString(undefined,{minimumFractionDigits: digits, maximumFractionDigits: digits}) + '%'}}function toCurrency(value, digits=2){if (value==0){return '-';}else{return '$' + value.toLocaleString(undefined,{minimumFractionDigits: digits, maximumFractionDigits: digits})}}function computePV(pmt, fv, rateValue, nper, compoundingFrequency){const periods=nper * compoundingFrequency; const periodRate=rateValue / compoundingFrequency; const periodPMT=pmt / compoundingFrequency; const cashFlowPV=periodPMT * (1 - Math.pow(1 + periodRate, -periods)) / periodRate; const fvPV=fv / Math.pow(1 + periodRate, periods); return -(cashFlowPV + fvPV);}function computePMT(pv, fv, rateValue, nper, compoundingFrequency){const periods=nper * compoundingFrequency; const periodRate=rateValue / compoundingFrequency; const periodPMT=-( pv + fv / Math.pow(1 + periodRate, periods)) * periodRate / (1 - Math.pow(1 + periodRate, -periods)); return periodPMT * compoundingFrequency;}function computeFV(pv, pmt, rateValue, nper, compoundingFrequency){const periods=nper * compoundingFrequency; const periodRate=rateValue / compoundingFrequency; const periodPMT=pmt / compoundingFrequency; const fv=-(pv * Math.pow(1 + periodRate, periods) + periodPMT / periodRate * (Math.pow(1 + periodRate, periods) - 1)); return fv;}function computeRateValue(pv, pmt, fv, nper, compoundingFrequency){const periods=nper * compoundingFrequency; const periodPMT=pmt / compoundingFrequency; attempts=0; min=-0.999; max=100.0; do{if (min===max){guess=NaN; break;}guess=(min + max) / 2; calculated=computePV(pmt, fv, guess, nper, compoundingFrequency); error=calculated - pv; if (error < 0){if (pv < 0){min=guess;}else{max=guess;}}else{if (pv < 0){max=guess;}else{min=guess;}}attempts +=1}while((Math.abs(error) > 0.000001) && (attempts <=100)); if (attempts > 100){return NaN;}else{return guess;}}function computeNPER(pv, pmt, fv, rateValue, compoundingFrequency){const periodRate=rateValue / compoundingFrequency; const periodPMT=pmt / compoundingFrequency; const numerator=-(fv - periodPMT / periodRate); const denomenator=pv + periodPMT / periodRate; const periods=baseLog(numerator / denomenator, 1 + periodRate); return periods / compoundingFrequency;}console.log("Calculator helper functions loaded"); const calculator=document.querySelector('#tvm-calculator'); if (calculator){console.log("Calculator found"); const inputs=calculator.querySelectorAll('input'); const selects=calculator.querySelectorAll('select'); const currencyInputs=calculator.querySelectorAll('input.currency'); const iWantToSolveForInput=calculator.querySelector('select#i-want-to-solve-for'); const iWantToSolveForLabel=calculator.querySelector('#i-want-to-solve-for-label'); const pvInput=calculator.querySelector('input#pv'); const pvLabel=calculator.querySelector('#pv-label'); const pmtInput=calculator.querySelector('input#pmt'); const pmtLabel=calculator.querySelector('#pmt-label'); const fvInput=calculator.querySelector('input#fv'); const fvLabel=calculator.querySelector('#fv-label'); const rateInput=calculator.querySelector('input#rate'); const nperInput=calculator.querySelector('input#nper'); const outputDiv=calculator.querySelector('#tvm-calculator .calculator-result'); function structureInputs(solveForId){calculator.querySelector('#pv-group').style.display="block"; calculator.querySelector('#pmt-group').style.display="block"; calculator.querySelector('#fv-group').style.display="block"; calculator.querySelector('#rate-group').style.display="block"; calculator.querySelector('#nper-group').style.display="block"; const solvingInput=calculator.querySelector('#' + solveForId); solvingInput.style.display="none";}function updateResults(){const iWantToSolveFor=iWantToSolveForInput.value; structureInputs(iWantToSolveFor); const pv=parseFloat(pvInput.value) || 0; const pmt=parseFloat(pmtInput.value) || 0; const fv=parseFloat(fvInput.value) || 0; const rate=parseFloat(rateInput.value) / 100.0 || 0; const nper=parseFloat(nperInput.value) || 0; const compoundingFrequency=1; if (outputDiv){if (nper < 1){outputDiv.innerHTML=''; outputDiv.appendChild(tag('span', "Set periods to at least 1", 'result-error')); return;}function calculateResult(){let outputText=document.createDocumentFragment(); let baseText=tag('div', null, 'calculator-highlighted-result'); switch(iWantToSolveFor){case 'pv-group': result=computePV(pmt, fv, rate, nper, compoundingFrequency); if (isNaN(result) || result==Infinity || result==-Infinity){outputDiv.appendChild(tag('span', "Error: Present Value could not be calculated", 'result-error')); return;}else{baseText.appendChild(document.createTextNode("The present value (PV) is ")); baseText.appendChild(tag('span', toCurrency(result), 'result-value'));}break; case 'pmt-group': result=computePMT(pv, fv, rate, nper, compoundingFrequency); if (isNaN(result) || result==Infinity || result==-Infinity){outputDiv.appendChild(tag('span', "Error: Payment could not be calculated", 'result-error')); return;}else{baseText.appendChild(document.createTextNode("The payment (PMT) is ")); baseText.appendChild(tag('span', toCurrency(result), 'result-value')); baseText.appendChild(document.createTextNode(" per period."));}break; case 'fv-group': result=computeFV(pv, pmt, rate, nper, compoundingFrequency); if (isNaN(result) || result==Infinity || result==-Infinity){outputDiv.appendChild(tag('span', "Error: Future value (FV) could not be calculated", 'result-error')); return;}else{baseText.appendChild(document.createTextNode("The future value (FV) is ")); baseText.appendChild(tag('span', toCurrency(result), 'result-value'));}break; case 'rate-group': result=computeRateValue(pv, pmt, fv, nper, compoundingFrequency); if (isNaN(result) || result==Infinity || result==-Infinity){outputDiv.appendChild(tag('span', "Error: Period interest rate (I) could not be calculated", 'result-error')); return;}else{baseText.appendChild(document.createTextNode("The period interest rate (I) is ")); baseText.appendChild(tag('span', toPercent(result, 8), 'result-value'));}break; case 'nper-group': if (pv===fv){outputDiv.appendChild(tag('span', "When present value and future value are equal, the periods could be any value.", 'result-error')); return;}else{result=computeNPER(pv, pmt, fv, rate, compoundingFrequency); if (result < 0.0 || isNaN(result) || result==Infinity || result==-Infinity){outputDiv.appendChild(tag('span', "Error: Periods (N) could not be calculated", 'result-error')); return;}else{baseText.appendChild(document.createTextNode("The number of periods (N) is ")); baseText.appendChild(tag('span', result.toFixed(2), 'result-value'));}}break; default: console.log(iWantToSolveFor);}outputText.appendChild(baseText); return outputText;}outputDiv.innerHTML=''; result=calculateResult(); if (result !=undefined){outputDiv.appendChild(result);}}}/* Set calculator to auto-update on input changes */ for (let i=0; i < inputs.length; i +=1){inputs[i].addEventListener('input', ()=>{updateResults();});}for (let i=0; i < selects.length; i +=1){selects[i].addEventListener('input', ()=>{updateResults();});}updateResults();}});</script>
