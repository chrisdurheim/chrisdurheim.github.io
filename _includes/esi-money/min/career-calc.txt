<style>.calculator{background-color: #F3F3F3; margin: 2rem auto; padding: 2rem 7.5%; border: 2px solid #0000B3;; max-width: 600px; clear: both;}.calculator-section{padding: 1rem 0;}.calculator-section h5{margin-top: 2rem;}h3.calculator-title, .calculator-result h4{padding: 1rem 0; text-align: center; text-decoration: underline; font-size: 2rem; text-transform: uppercase;}.calculator-section h4, .calculator-result h5{margin-bottom: 1rem; background-color: #0000B3; color: white; padding: 0.5rem; text-align: center;}.calculator-input{display: flex; flex-wrap: wrap; margin: 1rem 0 0;}.calculator-input label{flex: 0 0 100%; color: black;}.calculator-input .input-prefix{flex: 0 0 auto; padding: 0.5rem; margin: 0 0.25rem; line-height: 2rem;}.calculator-input input{flex: 1 0 auto; width: auto; max-width: 50%; padding: 0.5rem; margin: 0 0.25rem; font-size: 1rem; border: 1px solid #d6d6d6;}.calculator-input input:focus{outline: none; border: 1px solid #aaaaaa;}.calculator-input select.input-suffix{flex: 0 0 auto; width: auto; padding: 0.5rem; margin: 0 0.25rem;}input.calculator-slider{margin-top: 1rem; width: 100%; max-width: 100%;}.calculator-slider{-webkit-appearance: none; /* Override default CSS styles */ appearance: none; height: 0.5rem; /* Specified height */ border-radius: 0.5rem; border-color: #ddd; color: #ddd; background: #ddd; /* Grey background */ outline: none; /* Remove outline */ opacity: 1; /* Set transparency (for mouse-over effects on hover) */ -webkit-transition: .2s; /* 0.2 seconds transition on hover */ transition: opacity .2s; margin-top: 1rem !important; margin-bottom: 1rem !important; padding: 0 !important;}.calculator-slider:hover{background: #f5f5f5; /* Fully shown on mouse-over */}.calculator-slider::-webkit-slider-thumb{-webkit-appearance: none; /* Override default look */ appearance: none; width: 1.5rem; /* Set a specific slider handle width */ height: 1.5rem; /* Specified height */ border-radius: 50%; background: #0000B3; /* ESI Blue background */ cursor: pointer; /* Cursor on hover */}.calculator-slider::-moz-range-thumb{width: 1.5rem; /* Set a specific slider handle width */ height: 1.5rem; /* Specified height */ border-radius: 50%; background: #0000B3; /* ESI Blue background */ cursor: pointer; /* Cursor on hover */}.input-error{color: #ac0000; flex: 1 1 10rem; display: none;}.calculator-result{font-size: 0.9rem; margin-top: 2rem; overflow-x: auto;}.calculator-result .result-value{font-weight: bold;}.calculator-result .result-error{font-size: 1.5rem; color: #ac0000;}.calculator-result .calculator-highlighted-result{text-align: center; background-color: #ac0000; color: white; font-size: 1.8rem;}.calculator-result-table{max-width: 100%; overflow-x: scroll; font-size: 0.8rem;}.calculator-result-table tr{transition: background-color 50ms, color 50ms;}.calculator-result-table tr:hover td{background-color: #0000B3; color: white;}.calculator-result-table th{text-align: center;}.calculator-result-table td, .calculator-result-table th{padding: 0 0.5rem;}.calculator-result-table .currency-column{text-align: center;}button.calculator-button{width: 100%; background-color: #0000B3; margin: 0 auto; cursor: pointer; text-align: center;}.calculator-result-table th.base-color{background-color: black !important; color: white;}.calculator-result-table th.salary-color{background-color: green !important; color: white;}.calculator-result-table th.raise-color, .calculator-result-table th.needed-color{background-color: #ac0000 !important; color: white;}.calculator-result-table th.both-color, .calculator-result-table th.actual-color{background-color: #0000B3 !important; color: white;}#salary-chart, #difference-chart, #nest-egg-chart, #balance-chart{margin-top: -1rem; margin-bottom: 1rem; border: 2px solid #0000B3; background-color: white;}</style><form class="calculator" id="career-calculator-simple" action="#" accept-charset="UTF-8" method="post"> <h3 class="calculator-title">Impact of Career Growth Calculator</h3> <div class="calculator-section"> <h4>Base Case</h4> <div class="calculator-input"> <label for="starting-salary">Starting Salary</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="starting-salary" id="starting-salary" value="40,000" min="0"/> </div><div class="calculator-input"> <label id="annual-raise-rate-label" for="annual-raise-rate">3% annual raise</label><br/> <input value="3" class="calculator-slider" min="1" max="20" type="range" name="annual-raise-rate[]" id="annual-raise-rate"/> </div><div class="calculator-input"> <label id="years-of-employment-label" for="years-of-employment">50 years of employment</label><br/> <input value="50" class="calculator-slider" min="1" max="60" type="range" name="years-of-employment[]" id="years-of-employment"/> </div></div><div class="calculator-section"> <h4>Investment Assumptions</h4> <div class="calculator-input"> <label id="investment-gain-rate-label" for="investment-gain-rate">8% annual return on investments</label><br/> <input value="8" class="calculator-slider" min="1" max="20" type="range" name="investment-gain-rate[]" id="investment-gain-rate"/> </div><div class="calculator-input"> <label id="investment-portion-label" for="investment-portion">100% of salary difference invested</label><br/> <input value="100" class="calculator-slider" min="1" max="100" type="range" name="investment-portion[]" id="investment-portion"/> </div></div><div class="calculator-section"> <h4>Negotiated Higher Salary</h4> <div class="calculator-input"> <label for="negotiated-salary">Negotiated Salary</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="negotiated-salary" id="negotiated-salary" value="45,000" min="0"/> </div></div><div class="calculator-section"> <h4>Increased Annual Raise</h4> <div class="calculator-input"> <label id="increased-raise-rate-label" for="increased-raise-rate">4% annual raise</label><br/> <input value="4" class="calculator-slider" min="1" max="20" type="range" name="increased-raise-rate[]" id="increased-raise-rate"/> </div></div><div class="calculator-result" id="career-calculator-simple-result"> <p>With a starting salary of <span class="result-value" id="result-starting-salary">$40,000</span> and <span class="result-value" id="result-annual-raise-rate">3%</span> annual raises, your lifetime earnings would be <span class="result-value" id="result-lifetime-earnings">$4,511,875</span>.</p><p>Negotiating a starting salary of <span class="result-value" id="result-negotiated-salary">$45,000</span> would increase those earnings to <span class="result-value" id="result-negotiated-lifetime-earnings">$5,075,859</span>. Investing the difference in earnings along the way would give you a nest egg of <span class="result-value" id="result-negotiated-nest-egg">$4,251,771</span> at retirement.</p><p>Working to get higher annual raises of <span class="result-value" id="result-increased-raise-rate">4%</span> instead would increase your earnings to <span class="result-value" id="result-raise-lifetime-earnings">$6,106,683</span>. Investing the difference in earnings along the way would give you a nest egg of <span class="result-value" id="result-raise-nest-egg">$5,780,764</span> at retirement.</p><p>Doing both would increase your earnings to <span class="result-value" id="result-both-lifetime-earnings">$6,870,019</span>. Investing the difference in earnings along the way would give you a nest egg of <span class="result-value" id="result-negotiated-nest-egg">$10,755,130</span> at retirement.</p></div><div class="calculator-section"> <button class="calculator-button" id="calculator-details-button">Click to Show Detailed Results â†“</button> </div><div class="calculator-result" id="career-calculator-detailed-result"> </div></form><script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script><script type="text/javascript">document.addEventListener('DOMContentLoaded', ()=>{function tag(type, value=undefined, klass=undefined, id=undefined){let el=document.createElement(type); if (klass){el.setAttribute('class', klass);}if (id){el.setAttribute('id', id);}if (value){el.innerText=value;}return el}function toCurrency(value){if (value==0){return '-';}else{return '$' + value.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");}}function parseCurrencyToFloat(value){result=parseFloat(value.replace(/[($)\s\._\-]+/g, '').replace(/,/g, '')); if (isNaN(result)){return 0;}else{return result;}}function convertToCurrency(value){return value.toLocaleString()}let chartInitialized=false; let showDetails=false; const calculator=document.querySelector('#career-calculator-simple'); if (calculator){const inputs=document.querySelectorAll('input'); const currencyInputs=calculator.querySelectorAll('input.currency'); /* Basic inputs */ const startingSalaryInput=calculator.querySelector('input#starting-salary'); const annualRaiseRateInput=calculator.querySelector('input#annual-raise-rate'); const annualRaiseRateLabel=calculator.querySelector('#annual-raise-rate-label'); const yearsOfEmploymentInput=calculator.querySelector('input#years-of-employment'); const yearsOfEmploymentLabel=calculator.querySelector('#years-of-employment-label'); /* Investment Inputs */ const investmentGainRateInput=calculator.querySelector('input#investment-gain-rate'); const investmentGainRateLabel=calculator.querySelector('#investment-gain-rate-label'); const investmentPortionInput=calculator.querySelector('input#investment-portion'); const investmentPortionLabel=calculator.querySelector('#investment-portion-label'); /* Negotiated salary inputs */ const negotiatedSalaryInput=calculator.querySelector('input#negotiated-salary'); /* Higher annual raises inputs */ const increasedRaiseRateInput=calculator.querySelector('input#increased-raise-rate'); const increasedRaiseRateLabel=calculator.querySelector('#increased-raise-rate-label'); /* Output */ const outputDiv=calculator.querySelector('#career-calculator-simple-result'); const detailedOutputDiv=calculator.querySelector('#career-calculator-detailed-result'); /* Calculate and update labels and results, flag errors */ function updateResults(){const startingSalary=parseCurrencyToFloat(startingSalaryInput.value) || 0; const annualRaiseRate=parseFloat(annualRaiseRateInput.value) / 100.0 || 0; const investmentGainRate=parseFloat(investmentGainRateInput.value) / 100.0 || 0; const yearsOfEmployment=parseFloat(yearsOfEmploymentInput.value) || 0; const negotiatedSalary=parseCurrencyToFloat(negotiatedSalaryInput.value) || 0; const increasedRaiseRate=parseFloat(increasedRaiseRateInput.value) / 100.0 || 0; const investmentPortion=parseFloat(investmentPortionInput.value) / 100.0 || 1; /* Update labels */ let annualRaiseText=(annualRaiseRate * 100).toFixed(0); annualRaiseText +='% annual raise'; annualRaiseRateLabel.innerHTML=annualRaiseText; let increasedRaiseText=(increasedRaiseRate * 100).toFixed(0); increasedRaiseText +='% annual raise'; increasedRaiseRateLabel.innerHTML=increasedRaiseText; let investmentGainRateText=(investmentGainRate * 100).toFixed(0); investmentGainRateText +='% annual return on investments'; investmentGainRateLabel.innerHTML=investmentGainRateText; let investmentPortionText=(investmentPortion * 100).toFixed(0); investmentPortionText +='% of salary difference invested'; investmentPortionLabel.innerHTML=investmentPortionText; let yearsOfEmploymentText=yearsOfEmployment + ' year'; if (yearsOfEmployment !=1){yearsOfEmploymentText +='s';}yearsOfEmploymentText +=' of employment'; yearsOfEmploymentLabel.innerHTML=yearsOfEmploymentText; if (outputDiv){/* Validate Inputs */ if (startingSalary <=0.0){outputDiv.innerHTML=''; outputDiv.appendChild(tag('span', 'Set a starting salary greater than zero', 'result-error')); detailedOutputDiv.innerHTML=''; return;}if (negotiatedSalary <=startingSalary){outputDiv.innerHTML=''; outputDiv.appendChild(tag('span', 'Set a negotiated higher salary greater than the base case starting salary', 'result-error')); detailedOutputDiv.innerHTML=''; return;}if (increasedRaiseRate <=annualRaiseRate){outputDiv.innerHTML=''; outputDiv.appendChild(tag('span', 'Set an increased annual raise greater than the base case annual raise', 'result-error')); detailedOutputDiv.innerHTML=''; return;}function futureValue(payment, returnRate, increaseRate, years){if (returnRate==increaseRate){return payment * years * Math.pow(1 + returnRate, years - 1);}else{let numerator=Math.pow(1 + returnRate, years) - Math.pow(1 + increaseRate, years); let denomenator=(returnRate - increaseRate); return payment * numerator / denomenator;}}function lifetimeEarnings(start, raise, years){return futureValue(start, 0.0, raise, years);}function yearValues(salaryStart, salaryBump, raiseStart, raiseBump, investmentRate, year, investmentPercent=1){const baseLE=lifetimeEarnings(salaryStart, raiseStart, year); const salaryBumpLE=lifetimeEarnings(salaryBump, raiseStart, year); const raiseBumpLE=lifetimeEarnings(salaryStart, raiseBump, year); const bothBumpLE=lifetimeEarnings(salaryBump, raiseBump, year); const salaryBumpDiff=salaryBumpLE - baseLE; const raiseBumpDiff=raiseBumpLE - baseLE; const bothBumpDiff=bothBumpLE - baseLE; const baseEarningsInvested=futureValue(salaryStart, investmentRate, raiseStart, year); const salaryBumpEarningsInvested=futureValue(salaryBump, investmentRate, raiseStart, year); const raiseBumpEarningsInvested=futureValue(salaryStart, investmentRate, raiseBump, year); const bothBumpEarningsInvested=futureValue(salaryBump, investmentRate, raiseBump, year); const salaryBumpNestEgg=(salaryBumpEarningsInvested - baseEarningsInvested) * investmentPercent; const raiseBumpNestEgg=(raiseBumpEarningsInvested - baseEarningsInvested) * investmentPercent; const bothBumpNestEgg=(bothBumpEarningsInvested - baseEarningsInvested) * investmentPercent; const salary=salaryStart * Math.pow(1 + raiseStart, year - 1); const negotiatedSalary=salaryBump * Math.pow(1 + raiseStart, year - 1); const raiseSalary=salaryStart * Math.pow(1 + raiseBump, year - 1); const bothSalary=salaryBump * Math.pow(1 + raiseBump, year - 1); return{year: year, base:{label: 'Base', salary: salary, lifetimeEarnings: baseLE, difference: 0, totalDifference: 0, nestEgg: 0}, salaryBump:{label: 'Negotiated Salary', salary: negotiatedSalary, lifetimeEarnings: salaryBumpLE, difference: negotiatedSalary - salary, totalDifference: salaryBumpDiff, nestEgg: salaryBumpNestEgg}, raiseBump:{label: 'Increased Raises', salary: raiseSalary, lifetimeEarnings: raiseBumpLE, difference: raiseSalary - salary, totalDifference: raiseBumpDiff, nestEgg: raiseBumpNestEgg}, bothBump:{label: 'Both', salary: bothSalary, lifetimeEarnings: bothBumpLE, difference: bothSalary - salary, totalDifference: bothBumpDiff, nestEgg: bothBumpNestEgg}};}function yearByYearTable(salaryStart, salaryBump, raiseStart, raiseBump, investmentRate, years, investmentPercent=1){table=[]; for (let i=0; i <=years; i +=1){table[i]=yearValues(salaryStart, salaryBump, raiseStart, raiseBump, investmentRate, i + 1, investmentPercent);}return table;}yearTable=yearByYearTable(startingSalary, negotiatedSalary, annualRaiseRate, increasedRaiseRate, investmentGainRate, yearsOfEmployment, investmentPortion); endYearData=yearTable[yearsOfEmployment - 1]; const lifetimeEarningsResult=endYearData.base.lifetimeEarnings; const negotiatedLifetimeEarnings=lifetimeEarnings(negotiatedSalary, annualRaiseRate, yearsOfEmployment); const raiseLifetimeEarnings=lifetimeEarnings(startingSalary, increasedRaiseRate, yearsOfEmployment); const bothLifetimeEarnings=lifetimeEarnings(negotiatedSalary, increasedRaiseRate, yearsOfEmployment); const negotiatedDifference=negotiatedLifetimeEarnings - lifetimeEarningsResult; const raiseDifference=raiseLifetimeEarnings - lifetimeEarningsResult; const bothDifference=bothLifetimeEarnings - lifetimeEarningsResult; const lifetimeEarningsInvested=futureValue(startingSalary, investmentGainRate, annualRaiseRate, yearsOfEmployment); const negotiatedEarningsInvested=futureValue(negotiatedSalary, investmentGainRate, annualRaiseRate, yearsOfEmployment); const raiseEarningsInvested=futureValue(startingSalary, investmentGainRate, increasedRaiseRate, yearsOfEmployment); const bothEarningsInvested=futureValue(negotiatedSalary, investmentGainRate, increasedRaiseRate, yearsOfEmployment); const negotiatedNestEgg=negotiatedEarningsInvested - lifetimeEarningsInvested; const raiseNestEgg=raiseEarningsInvested - lifetimeEarningsInvested; const bothNestEgg=bothEarningsInvested - lifetimeEarningsInvested; function resultSpan(value){el=document.createElement('span'); el.setAttribute('class', 'result-value'); el.innerText=value; return el;}/* Update output */ function summaryText(data){let outputText=document.createDocumentFragment(); let baseText=document.createElement('p'); baseText.appendChild(document.createTextNode("With a starting salary of ")); baseText.appendChild(tag('span', toCurrency(startingSalary), 'result-value')); baseText.appendChild(document.createTextNode(" and ")); baseText.appendChild(tag('span', (annualRaiseRate * 100).toFixed(0) + '%', 'result-value')); baseText.appendChild(document.createTextNode(" annual raises, your lifetime earnings would be ")); baseText.appendChild(tag('span', toCurrency(data.base.lifetimeEarnings), 'result-value')); baseText.appendChild(document.createTextNode(".")); outputText.appendChild(baseText); let salaryBumpText=document.createElement('p'); salaryBumpText.appendChild(document.createTextNode("Negotiating a starting salary of ")); salaryBumpText.appendChild(tag('span', toCurrency(negotiatedSalary), 'result-value')); salaryBumpText.appendChild(document.createTextNode(" would increase those earnings to ")); salaryBumpText.appendChild(tag('span', toCurrency(data.salaryBump.lifetimeEarnings), 'result-value')); salaryBumpText.appendChild(document.createTextNode(". Investing ")); salaryBumpText.appendChild(tag('span', (investmentPortion * 100).toFixed(0) + '%', 'result-value')); salaryBumpText.appendChild(document.createTextNode(" of the difference in earnings along the way would give you a nest egg of ")); salaryBumpText.appendChild(tag('span', toCurrency(data.salaryBump.nestEgg), 'result-value')); salaryBumpText.appendChild(document.createTextNode(" at retirement.")); outputText.appendChild(salaryBumpText); let raiseBumpText=document.createElement('p'); raiseBumpText.appendChild(document.createTextNode("Working to get higher annual raises of ")); raiseBumpText.appendChild(tag('span', (increasedRaiseRate * 100).toFixed(0) + '%', 'result-value')); raiseBumpText.appendChild(document.createTextNode(" instead would increase your earnings to ")); raiseBumpText.appendChild(tag('span', toCurrency(data.raiseBump.lifetimeEarnings), 'result-value')); raiseBumpText.appendChild(document.createTextNode(". Investing ")); raiseBumpText.appendChild(tag('span', (investmentPortion * 100).toFixed(0) + '%', 'result-value')); raiseBumpText.appendChild(document.createTextNode(" of the difference in earnings along the way would give you a nest egg of ")); raiseBumpText.appendChild(tag('span', toCurrency(data.raiseBump.nestEgg), 'result-value')); raiseBumpText.appendChild(document.createTextNode(" at retirement.")); outputText.appendChild(raiseBumpText); let bothBumpText=document.createElement('p'); bothBumpText.appendChild(document.createTextNode("Doing both would increase your earnings to ")); bothBumpText.appendChild(tag('span', toCurrency(data.bothBump.lifetimeEarnings), 'result-value')); bothBumpText.appendChild(document.createTextNode(". Investing ")); bothBumpText.appendChild(tag('span', (investmentPortion * 100).toFixed(0) + '%', 'result-value')); bothBumpText.appendChild(document.createTextNode(" of the difference in earnings along the way would give you a nest egg of ")); bothBumpText.appendChild(tag('span', toCurrency(data.bothBump.nestEgg), 'result-value')); bothBumpText.appendChild(document.createTextNode(" at retirement.")); outputText.appendChild(bothBumpText); return outputText}function littleTable(data){function summaryTableRow(scenario){let tableRow=document.createElement('tr'); tableRow.appendChild(tag('td', scenario.label)); tableRow.appendChild(tag('td', toCurrency(scenario.lifetimeEarnings), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(scenario.totalDifference), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(scenario.nestEgg), 'currency-column')); return tableRow;}let outputTableContainer=document.createElement('div'); outputTableContainer.setAttribute('class', 'calculator-result-table'); let table=document.createElement('table'); let tableHead=document.createElement('tr'); tableHead.appendChild(tag('th', 'Scenario')); tableHead.appendChild(tag('th', 'Lifetime Earnings')); tableHead.appendChild(tag('th', 'Difference')); tableHead.appendChild(tag('th', 'Difference if Invested')); table.appendChild(tableHead); table.appendChild(summaryTableRow(data.base)); table.appendChild(summaryTableRow(data.salaryBump)); table.appendChild(summaryTableRow(data.raiseBump)); table.appendChild(summaryTableRow(data.bothBump)); outputTableContainer.appendChild(table); return outputTableContainer;}function bigTable(table){function salaryRow(row){let tableRow=document.createElement('tr'); tableRow.appendChild(tag('td', row.year)); tableRow.appendChild(tag('td', toCurrency(row.base.salary), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.salaryBump.salary), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.raiseBump.salary), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.bothBump.salary), 'currency-column')); return tableRow;}function differenceRow(row){let tableRow=document.createElement('tr'); tableRow.appendChild(tag('td', row.year)); tableRow.appendChild(tag('td', toCurrency(row.salaryBump.difference), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.raiseBump.difference), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.bothBump.difference), 'currency-column')); return tableRow;}function nestEggRow(row){let tableRow=document.createElement('tr'); tableRow.appendChild(tag('td', row.year)); tableRow.appendChild(tag('td', toCurrency(row.salaryBump.nestEgg), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.raiseBump.nestEgg), 'currency-column')); tableRow.appendChild(tag('td', toCurrency(row.bothBump.nestEgg), 'currency-column')); return tableRow;}let salaryOutput=document.createDocumentFragment(); salaryOutput.appendChild(tag('h5', 'Year-by-Year Salaries')); salaryOutput.appendChild(tag('div', '', undefined, 'salary-chart')); let salaryTableContainer=tag('div', undefined, 'calculator-result-table'); salaryOutput.appendChild(salaryTableContainer); let salaryTableEl=tag('table'); salaryTableContainer.appendChild(salaryTableEl); let salaryTableH1=tag('tr'); let salaryTableH1E1=tag('th', 'Year'); salaryTableH1E1.setAttribute('rowspan', '2'); let salaryTableH1E2=tag('th', 'Salary'); salaryTableH1E2.setAttribute('colspan', '4'); salaryTableH1.appendChild(salaryTableH1E1); salaryTableH1.appendChild(salaryTableH1E2); let salaryTableH2=tag('tr'); salaryTableH2.appendChild(tag('th', 'Base Salary', 'base-color')); salaryTableH2.appendChild(tag('th', 'Higher Start', 'salary-color')); salaryTableH2.appendChild(tag('th', 'Higher Raise', 'raise-color')); salaryTableH2.appendChild(tag('th', 'Both', 'both-color')); salaryTableEl.appendChild(salaryTableH1); salaryTableEl.appendChild(salaryTableH2); let differenceOutput=document.createDocumentFragment(); differenceOutput.appendChild(tag('h5', 'Earnings Difference from Base')); differenceOutput.appendChild(tag('div', '', undefined, 'difference-chart')); let differenceTableContainer=tag('div', undefined, 'calculator-result-table'); differenceOutput.appendChild(differenceTableContainer); let differenceTableEl=tag('table'); differenceTableContainer.appendChild(differenceTableEl); let differenceTableH1=tag('tr'); let differenceTableH1E1=tag('th', 'Year'); differenceTableH1E1.setAttribute('rowspan', '2'); let differenceTableH1E2=tag('th', 'Difference from Base'); differenceTableH1E2.setAttribute('colspan', '4'); differenceTableH1.appendChild(differenceTableH1E1); differenceTableH1.appendChild(differenceTableH1E2); let differenceTableH2=tag('tr'); differenceTableH2.appendChild(tag('th', 'Higher Start', 'salary-color')); differenceTableH2.appendChild(tag('th', 'Higher Raise', 'raise-color')); differenceTableH2.appendChild(tag('th', 'Both', 'both-color')); differenceTableEl.appendChild(differenceTableH1); differenceTableEl.appendChild(differenceTableH2); let nestEggOutput=document.createDocumentFragment(); nestEggOutput.appendChild(tag('h5', 'Difference from Base if Invested')); nestEggOutput.appendChild(tag('div', '', undefined, 'nest-egg-chart')); let nestEggTableContainer=tag('div', undefined, 'calculator-result-table'); nestEggOutput.appendChild(nestEggTableContainer); let nestEggTableEl=tag('table'); nestEggTableContainer.appendChild(nestEggTableEl); let nestEggTableH1=tag('tr'); let nestEggTableH1E1=tag('th', 'Year'); nestEggTableH1E1.setAttribute('rowspan', '2'); let nestEggTableH1E2=tag('th', 'Difference if Invested'); nestEggTableH1E2.setAttribute('colspan', '4'); nestEggTableH1.appendChild(nestEggTableH1E1); nestEggTableH1.appendChild(nestEggTableH1E2); let nestEggTableH2=tag('tr'); nestEggTableH2.appendChild(tag('th', 'Higher Start', 'salary-color')); nestEggTableH2.appendChild(tag('th', 'Higher Raise', 'raise-color')); nestEggTableH2.appendChild(tag('th', 'Both', 'both-color')); nestEggTableEl.appendChild(nestEggTableH1); nestEggTableEl.appendChild(nestEggTableH2); for (let i=0; i < table.length - 1; i +=1){dataRow=table[i]; salaryTableEl.appendChild(salaryRow(dataRow)); differenceTableEl.appendChild(differenceRow(dataRow)); nestEggTableEl.appendChild(nestEggRow(dataRow));}let preface=tag('p', 'See the charts and tables below for detailed year-by-year results', 'calculator-result-text'); let out=document.createDocumentFragment(); out.appendChild(preface); out.appendChild(salaryOutput); out.appendChild(differenceOutput); out.appendChild(nestEggOutput); return out;}outputDiv.innerHTML=''; let outputHeading=document.createElement('h4'); outputHeading.innerText='Results'; outputDiv.appendChild(outputHeading); outputDiv.appendChild(littleTable(endYearData)); outputDiv.appendChild(summaryText(endYearData)); detailedOutputDiv.innerHTML=''; if (showDetails){detailedOutputDiv.appendChild(bigTable(yearTable));}if (showDetails){drawCharts(yearTable);}}}/* Set calculator to auto-update on input changes */ for (let i=0; i < inputs.length; i +=1){inputs[i].addEventListener('input', ()=>{showDetails=false; detailButton.innerHTML='Click to Show Detailed Results â†“'; updateResults();});}/* Auto-format with commas */ for (let i=0; i < currencyInputs.length; i +=1){currencyInputs[i].addEventListener('input', ()=>{currencyInputs[i].value=convertToCurrency(parseCurrencyToFloat(currencyInputs[i].value));});}const detailButton=document.querySelector('#calculator-details-button'); detailButton.addEventListener('click', (event)=>{event.preventDefault(); if (showDetails){showDetails=false; detailButton.innerHTML='Click to Show Detailed Results â†“'; updateResults();}else{showDetails=true; detailButton.innerHTML='Click to Hide Detailed Results â†‘'; updateResults();}}); function chartReady(){chartInitialized=true; updateResults();}function drawCharts(data){if (chartInitialized){let salaryTable=new google.visualization.DataTable(); salaryTable.addColumn('number', 'Year'); salaryTable.addColumn('number', 'Base'); salaryTable.addColumn('number', 'Higher Start'); salaryTable.addColumn('number', 'Higher Raise'); salaryTable.addColumn('number', 'Both'); let differenceTable=new google.visualization.DataTable(); differenceTable.addColumn('number', 'Year'); differenceTable.addColumn('number', 'Higher Start'); differenceTable.addColumn('number', 'Higher Raise'); differenceTable.addColumn('number', 'Both'); let nestEggTable=new google.visualization.DataTable(); nestEggTable.addColumn('number', 'Year'); nestEggTable.addColumn('number', 'Higher Start'); nestEggTable.addColumn('number', 'Higher Raise'); nestEggTable.addColumn('number', 'Both'); for (let i=0; i < data.length - 1; i +=1){dataRow=data[i]; salaryTable.addRows([[{v: dataRow.year, f: 'Year ' + dataRow.year},{v: Math.round(dataRow.base.salary) / 1000, f: toCurrency(Math.round(dataRow.base.salary / 1000)) + 'k'},{v: Math.round(dataRow.salaryBump.salary) / 1000, f: toCurrency(Math.round(dataRow.salaryBump.salary / 1000)) + 'k'},{v: Math.round(dataRow.raiseBump.salary) / 1000, f: toCurrency(Math.round(dataRow.raiseBump.salary / 1000)) + 'k'},{v: Math.round(dataRow.bothBump.salary) / 1000, f: toCurrency(Math.round(dataRow.bothBump.salary / 1000)) + 'k'}]]); differenceTable.addRows([[{v: dataRow.year, f: 'Year ' + dataRow.year},{v: Math.round(dataRow.salaryBump.difference) / 1000, f: toCurrency(Math.round(dataRow.salaryBump.difference / 1000)) + 'k'},{v: Math.round(dataRow.raiseBump.difference) / 1000, f: toCurrency(Math.round(dataRow.raiseBump.difference / 1000)) + 'k'},{v: Math.round(dataRow.bothBump.difference) / 1000, f: toCurrency(Math.round(dataRow.bothBump.difference / 1000)) + 'k'}]]); nestEggTable.addRows([[{v: dataRow.year, f: 'Year ' + dataRow.year},{v: Math.round(dataRow.salaryBump.nestEgg) / 1000, f: toCurrency(Math.round(dataRow.salaryBump.nestEgg / 1000)) + 'k'},{v: Math.round(dataRow.raiseBump.nestEgg) / 1000, f: toCurrency(Math.round(dataRow.raiseBump.nestEgg / 1000)) + 'k'},{v: Math.round(dataRow.bothBump.nestEgg) / 1000, f: toCurrency(Math.round(dataRow.bothBump.nestEgg / 1000)) + 'k'}]]);}let baseOptions={animation:{duration: 100, startup: true, easing: 'inAndOut'}, colors:[ 'green', '#ac0000', '#0000B3'], chartArea:{left: '20%', top: '10%', width: '70%', height: '70%'}, hAxis:{maxValue: data.length - 1, minValue: 1, textStyle:{fontName: 'Fjalla One', fontSize: 11}}, height: 300, legend:{position: 'bottom', textStyle:{fontName: 'Fjalla One', fontSize: 11}}, titleTextStyle:{fontName: 'Fjalla One', fontSize: 20}, vAxis:{format: '$#,###k', textStyle:{fontName: 'Fjalla One', fontSize: 11}}}; differenceChartElement=new google.visualization.LineChart(document.getElementById('difference-chart')); differenceChartElement.draw(differenceTable, baseOptions); nestEggChartElement=new google.visualization.LineChart(document.getElementById('nest-egg-chart')); nestEggChartElement.draw(nestEggTable, baseOptions); salaryOptions=baseOptions; salaryOptions.colors=['black', 'green', '#ac0000', '#0000B3']; salaryChartElement=new google.visualization.LineChart(document.getElementById('salary-chart')); salaryChartElement.draw(salaryTable, salaryOptions);}}google.charts.load('current',{'packages':['corechart']}); google.charts.setOnLoadCallback(chartReady); /* Update on load */ updateResults();}});</script>
