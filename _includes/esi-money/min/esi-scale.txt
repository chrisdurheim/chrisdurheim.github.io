<style>.calculator{background-color: #F3F3F3; margin: 2rem auto; padding: 2rem 7.5%; border: 2px solid #0000B3;; max-width: 600px; clear: both;}.calculator-section{padding: 1rem 0;}.calculator-section h5{margin-top: 2rem;}h3.calculator-title, .calculator-result h4{padding: 1rem 0; text-align: center; text-decoration: underline; font-size: 2rem; text-transform: uppercase;}.calculator-section h4, .calculator-result h5{margin-bottom: 1rem; background-color: #0000B3; color: white; padding: 0.5rem; text-align: center;}.calculator-input{display: flex; flex-wrap: wrap; margin: 1rem 0 0;}.calculator-input label{flex: 0 0 100%; color: black;}.calculator-input .input-prefix{flex: 0 0 auto; padding: 0.5rem; margin: 0 0.25rem; line-height: 2rem;}.calculator-input input{flex: 1 0 auto; width: auto; max-width: 50%; padding: 0.5rem; margin: 0 0.25rem; font-size: 1rem; border: 1px solid #d6d6d6;}.calculator-input input:focus{outline: none; border: 1px solid #aaaaaa;}.calculator-input select.input-suffix{flex: 0 0 auto; width: auto; padding: 0.5rem; margin: 0 0.25rem;}input.calculator-slider{margin-top: 1rem; width: 100%; max-width: 100%;}.calculator-slider{-webkit-appearance: none; /* Override default CSS styles */ appearance: none; height: 0.5rem; /* Specified height */ border-radius: 0.5rem; border-color: #ddd; color: #ddd; background: #ddd; /* Grey background */ outline: none; /* Remove outline */ opacity: 1; /* Set transparency (for mouse-over effects on hover) */ -webkit-transition: .2s; /* 0.2 seconds transition on hover */ transition: opacity .2s; margin-top: 1rem !important; margin-bottom: 1rem !important; padding: 0 !important;}.calculator-slider:hover{background: #f5f5f5; /* Fully shown on mouse-over */}.calculator-slider::-webkit-slider-thumb{-webkit-appearance: none; /* Override default look */ appearance: none; width: 1.5rem; /* Set a specific slider handle width */ height: 1.5rem; /* Specified height */ border-radius: 50%; background: #0000B3; /* ESI Blue background */ cursor: pointer; /* Cursor on hover */}.calculator-slider::-moz-range-thumb{width: 1.5rem; /* Set a specific slider handle width */ height: 1.5rem; /* Specified height */ border-radius: 50%; background: #0000B3; /* ESI Blue background */ cursor: pointer; /* Cursor on hover */}.input-error{color: #ac0000; flex: 1 1 10rem; display: none;}.calculator-result{font-size: 0.9rem; margin-top: 2rem; overflow-x: auto;}.calculator-result .result-value{font-weight: bold;}.calculator-result .result-error{font-size: 1.5rem; color: #ac0000;}.calculator-result .calculator-highlighted-result{text-align: center; background-color: #ac0000; color: white; font-size: 1.8rem;}.calculator-result-table{max-width: 100%; overflow-x: scroll; font-size: 0.8rem;}.calculator-result-table tr{transition: background-color 50ms, color 50ms;}.calculator-result-table tr:hover td{background-color: #0000B3; color: white;}.calculator-result-table th{text-align: center;}.calculator-result-table td, .calculator-result-table th{padding: 0 0.5rem;}.calculator-result-table .currency-column{text-align: center;}button.calculator-button{width: 100%; background-color: #0000B3; margin: 0 auto; cursor: pointer; text-align: center;}.calculator-result-table th.base-color{background-color: black !important; color: white;}.calculator-result-table th.salary-color{background-color: green !important; color: white;}.calculator-result-table th.raise-color, .calculator-result-table th.needed-color{background-color: #ac0000 !important; color: white;}.calculator-result-table th.both-color, .calculator-result-table th.actual-color{background-color: #0000B3 !important; color: white;}#salary-chart, #difference-chart, #nest-egg-chart, #balance-chart{margin-top: -1rem; margin-bottom: 1rem; border: 2px solid #0000B3; background-color: white;}</style><form class="calculator" id="esi-scale-calculator" action="#" accept-charset="UTF-8" method="post"> <h3 class="calculator-title">ESI Scale Financial Independence Calculator</h3> <div class="calculator-section"> <h4>Earn</h4> <h5>Salary</h5> <div class="calculator-input"> <label for="current-salary">Current Annual Salary</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="current-salary" id="current-salary" value="60,000" min="0"/> </div><div class="calculator-input"> <label id="annual-raise-rate-label" for="annual-raise-rate">3% annual salary raise</label><br/> <input value="3" class="calculator-slider" min="1" max="20" step="0.25" type="range" name="annual-raise-rate[]" id="annual-raise-rate"/> </div><h5>Side Hustle Income</h5> <div class="calculator-input"> <label for="side-hustle-year-1">Year 1</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="side-hustle-year-1" id="side-hustle-year-1" value="1,000" min="0"/> </div><div class="calculator-input"> <label for="side-hustle-year-2">Year 2</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="side-hustle-year-2" id="side-hustle-year-2" value="2,000" min="0"/> </div><div class="calculator-input"> <label for="side-hustle-year-3">Year 3</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="side-hustle-year-3" id="side-hustle-year-3" value="5,000" min="0"/> </div><div class="calculator-input"> <label for="side-hustle-year-4">Year 4</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="side-hustle-year-4" id="side-hustle-year-4" value="8,000" min="0"/> </div><div class="calculator-input"> <label for="side-hustle-year-5">Year 5 (and beyond)</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="side-hustle-year-5" id="side-hustle-year-5" value="10,000" min="0"/> </div><h5>Other Income</h5> <div class="calculator-input"> <label for="other-income">Other Annual Income</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="other-income" id="other-income" value="5,000" min="0"/> </div></div><div class="calculator-section"> <h4>Save</h4> <div class="calculator-input"> <label id="savings-rate-label" for="savings-rate">Saving 20% of total income ($9,200 this year)</label><br/> <input value="20" class="calculator-slider" min="1" max="100" type="range" name="savings-rate[]" id="savings-rate"/> </div></div><div class="calculator-section"> <h4>Invest</h4> <div class="calculator-input"> <label for="current-balance">Current Investment Balance</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="current-balance" id="current-balance" value="100,000" min="0"/> </div><div class="calculator-input"> <label id="growth-rate-label" for="growth-rate">8% annual return on investments</label><br/> <input value="8" class="calculator-slider" min="1" max="20" step="0.25" type="range" name="growth-rate[]" id="growth-rate"/> </div></div><div class="calculator-section"> <h4>Financial Independence</h4> <div class="calculator-input"> <label for="annual-spending">Expected Annual Spending in FI</label><br/> <span class="input-prefix">$</span> <input type="text" class="currency" name="annual-spending" id="annual-spending" value="40,000" min="0"/> </div><div class="calculator-input"> <label id="inflation-rate-label" for="inflation-rate">2.5% annual spending inflation rate</label><br/> <input value="2.5" class="calculator-slider" min="1" max="20" step="0.25" type="range" name="inflation-rate[]" id="inflation-rate"/> </div><div class="calculator-input"> <label id="withdrawal-rate-label" for="withdrawal-rate">4% assumed annual withdrawal rate or earnings on assets</label><br/> <input value="4" class="calculator-slider" min="1" max="20" step="0.25" type="range" name="withdrawal-rate[]" id="withdrawal-rate"/> </div></div><div class="calculator-result" id="simple-result"> <p>You're on-track to reach financial independence in <span class="result-value">20 years</span></p></div><div class="calculator-section"> <button class="calculator-button" id="calculator-details-button">Click to Show Detailed Results â†“</button> </div><div class="calculator-result" id="detailed-result"> </div></form><script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script><script type="text/javascript">document.addEventListener('DOMContentLoaded', ()=>{function toCurrency(value){if (value==0){return '-';}else{return '$' + value.toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ",");}}function parseCurrencyToFloat(value){result=parseFloat(value.replace(/[($)\s\._\-]+/g, '').replace(/,/g, '')); if (isNaN(result)){return 0;}else{return result;}}function convertToCurrency(value){return value.toLocaleString()}let chartInitialized=false; let showDetails=false; const calculator=document.querySelector('.calculator#esi-scale-calculator'); if (calculator){const inputs=calculator.querySelectorAll('input'); const currencyInputs=calculator.querySelectorAll('input.currency'); /* Earn inputs */ const startingSalaryInput=calculator.querySelector('input#current-salary'); const annualRaiseRateInput=calculator.querySelector('input#annual-raise-rate'); const annualRaiseRateLabel=calculator.querySelector('#annual-raise-rate-label'); const sideHustleYear1Input=calculator.querySelector('input#side-hustle-year-1'); const sideHustleYear2Input=calculator.querySelector('input#side-hustle-year-2'); const sideHustleYear3Input=calculator.querySelector('input#side-hustle-year-3'); const sideHustleYear4Input=calculator.querySelector('input#side-hustle-year-4'); const sideHustleYear5Input=calculator.querySelector('input#side-hustle-year-5'); const otherIncomeInput=calculator.querySelector('input#other-income'); /* Save Inputs */ const savingsRateInput=calculator.querySelector('input#savings-rate'); const savingsRateLabel=calculator.querySelector('#savings-rate-label'); /* Invest Inputs */ const startingBalanceInput=calculator.querySelector('input#current-balance'); const investmentGrowthRateInput=calculator.querySelector('input#growth-rate'); const investmentGrowthRateLabel=calculator.querySelector('#growth-rate-label'); /* FI Inputs */ const startingSpendingInput=calculator.querySelector('input#annual-spending'); const inflationRateInput=calculator.querySelector('input#inflation-rate'); const inflationRateLabel=calculator.querySelector('#inflation-rate-label'); const withdrawalRateInput=calculator.querySelector('input#withdrawal-rate'); const withdrawalRateLabel=calculator.querySelector('#withdrawal-rate-label'); /* Output */ const outputDiv=calculator.querySelector('.calculator-result#simple-result'); const detailedOutputDiv=calculator.querySelector('.calculator-result#detailed-result'); /* Calculate and update labels and results, flag errors */ function updateResults(){const startingSalary=parseCurrencyToFloat(startingSalaryInput.value) || 0; const sideHustleYear1=parseCurrencyToFloat(sideHustleYear1Input.value) || 0; const sideHustleYear2=parseCurrencyToFloat(sideHustleYear2Input.value) || 0; const sideHustleYear3=parseCurrencyToFloat(sideHustleYear3Input.value) || 0; const sideHustleYear4=parseCurrencyToFloat(sideHustleYear4Input.value) || 0; const sideHustleYear5=parseCurrencyToFloat(sideHustleYear5Input.value) || 0; const otherIncome=parseCurrencyToFloat(otherIncomeInput.value) || 0; const startingBalance=parseCurrencyToFloat(startingBalanceInput.value) || 0; const startingSpending=parseCurrencyToFloat(startingSpendingInput.value) || 0; const annualRaiseRate=parseFloat(annualRaiseRateInput.value) / 100.0 || 0; const savingsRate=parseFloat(savingsRateInput.value) / 100.0 || 0; const investmentGrowthRate=parseFloat(investmentGrowthRateInput.value) / 100.0 || 0; const inflationRate=parseFloat(inflationRateInput.value) / 100.0 || 0; const withdrawalRate=parseFloat(withdrawalRateInput.value) / 100.0 || 0; /* Update labels */ let annualRaiseText=(annualRaiseRate * 100).toFixed(2); annualRaiseText +='% annual raise'; annualRaiseRateLabel.innerHTML=annualRaiseText; let savingsRateText='Saving '; savingsRateText +=(savingsRate * 100).toFixed(0); savingsRateText +='% of total income ('; savingsRateText +=toCurrency(savingsRate * (startingSalary + sideHustleYear1 + otherIncome)); savingsRateText +=' this year)'; savingsRateLabel.innerHTML=savingsRateText; let investmentGrowthRateText=(investmentGrowthRate * 100).toFixed(2); investmentGrowthRateText +='% annual return on investments'; investmentGrowthRateLabel.innerHTML=investmentGrowthRateText; let inflationRateText=(inflationRate * 100).toFixed(2); inflationRateText +='% annual spending inflation rate'; inflationRateLabel.innerHTML=inflationRateText; let withdrawalRateText=(withdrawalRate * 100).toFixed(2); withdrawalRateText +='% assumed annual withdrawal rate or earnings on assets'; withdrawalRateLabel.innerHTML=withdrawalRateText; if (outputDiv){/* Validate Inputs */ if (startingSalary <=0.0){outputDiv.innerHTML='<span class="result-error">Set a starting salary greater than zero</span>'; detailedOutputDiv.innerHTML=''; return;}if (otherIncome < 0.0){outputDiv.innerHTML='<span class="result-error">Set other income to something zero or greater</span>'; detailedOutputDiv.innerHTML=''; return;}if (startingBalance < 0.0){outputDiv.innerHTML='<span class="result-error">Set a current investment balance of at least zero</span>'; detailedOutputDiv.innerHTML=''; return;}if (startingSpending <=0.0){outputDiv.innerHTML='<span class="result-error">Set an expected annual spending in FI greater than $0</span>'; detailedOutputDiv.innerHTML=''; return;}if (startingSpending <=(startingBalance * withdrawalRate)){outputDiv.innerHTML="<h4>You're already financially independent!</h4>"; detailedOutputDiv.innerHTML=''; return;}function sideHustleIncome(year, inflation){if (year==0){return sideHustleYear1;}else if (year==1){return sideHustleYear2;}else if (year==2){return sideHustleYear3;}else if (year==3){return sideHustleYear4;}else if (year==4){return sideHustleYear5;}else{return sideHustleYear5 * Math.pow(1 + inflation, year - 4);}}let currentBalance=startingBalance; let fiYear=-1; yearData=[]; /* Compute Years to FI */ for (let i=0; i <=100; i +=1){const spending=startingSpending * Math.pow(1 + inflationRate, i); const sideHustle=sideHustleIncome(i, inflationRate); const other=otherIncome * Math.pow(1 + inflationRate, i); const balNeeded=(spending - sideHustle - other) / withdrawalRate; const year=i; const salary=startingSalary * Math.pow(1 + annualRaiseRate, i); const totalIncome=salary + sideHustle + other; const savings=totalIncome * savingsRate; const interest=currentBalance * investmentGrowthRate; const endBalance=currentBalance + savings + interest; yearData[i]={year: i, balance: currentBalance, needed: balNeeded}; if (fiYear==-1 && currentBalance >=balNeeded){fiYear=i;}/* Set up for next year */ currentBalance=endBalance;}let out=''; if (fiYear==0){out +="<h4>You're already financially independent!</h4>";}else{out +="<h4>You're on-track to reach financial independence in:</h4>"; out +='<div class="calculator-highlighted-result">'; if (fiYear !==-1){out +=fiYear + ' year'; if (fiYear !==1){out +='s';}}else{out +='More than 100 years';}out +="</div>";}outputDiv.innerHTML=out; function bigTable(table){function tableRow(row){let html='<tr>'; html +='<td>' + row.year + '</td>'; html +='<td class="currency-column">' + toCurrency(row.needed) + '</td>'; html +='<td class="currency-column">' + toCurrency(row.balance) + '</td>'; html +='</tr>'; return html;}let balanceOutput='<h5>Account Balance vs Target</h5>'; balanceOutput +='<div id="balance-chart"></div>'; balanceOutput +='<div class="calculator-result-table"><table>'; balanceOutput +='<tr>'; balanceOutput +='<th>Year</th>'; balanceOutput +='<th class="needed-color">Balance Needed for FI</th>'; balanceOutput +='<th class="actual-color">Actual Balance</th>'; balanceOutput +='</tr>'; outputRows=(fiYear !==-1) ? fiYear + 1 : 101; for (let i=0; i < outputRows; i +=1){dataRow=table[i]; balanceOutput +=tableRow(dataRow);}balanceOutput +='</table></div>'; const preface='<p>See the chart and table below for detailed year-by-year results</p>'; return preface + balanceOutput;}if (showDetails && fiYear > 0){detailedOutputDiv.innerHTML=bigTable(yearData); drawCharts(yearData, outputRows);}else{detailedOutputDiv.innerHTML='';}}}/* Set calculator to auto-update on input changes */ for (let i=0; i < inputs.length; i +=1){inputs[i].addEventListener('input', ()=>{updateResults();});}/* Auto-format with commas */ for (let i=0; i < currencyInputs.length; i +=1){currencyInputs[i].addEventListener('input', ()=>{currencyInputs[i].value=convertToCurrency(parseCurrencyToFloat(currencyInputs[i].value));});}const detailButton=document.querySelector('#calculator-details-button'); detailButton.addEventListener('click', (event)=>{event.preventDefault(); if (showDetails){showDetails=false; detailButton.innerHTML='Click to Show Detailed Results â†“'; updateResults();}else{showDetails=true; detailButton.innerHTML='Click to Hide Detailed Results â†‘'; updateResults();}}); function chartReady(){chartInitialized=true; updateResults();}function drawCharts(data, rows){if (chartInitialized){let balanceTable=new google.visualization.DataTable(); balanceTable.addColumn('number', 'Year'); balanceTable.addColumn('number', 'Needed for FI'); balanceTable.addColumn('number', 'Actual'); for (let i=0; i < rows; i +=1){dataRow=data[i]; balanceTable.addRows([[{v: dataRow.year, f: 'Year ' + dataRow.year},{v: Math.round(dataRow.needed / 1000), f: toCurrency(Math.round(dataRow.needed / 1000)) + 'k'},{v: Math.round(dataRow.balance / 1000), f: toCurrency(Math.round(dataRow.balance / 1000)) + 'k'},]]);}let baseOptions={animation:{duration: 100, startup: true, easing: 'inAndOut'}, colors:[ '#ac0000', '#0000B3'], chartArea:{left: '20%', top: '10%', width: '70%', height: '70%'}, hAxis:{maxValue: rows, minValue: 1, textStyle:{fontName: 'Fjalla One', fontSize: 11}}, height: 300, legend:{position: 'bottom', textStyle:{fontName: 'Fjalla One', fontSize: 11}}, titleTextStyle:{fontName: 'Fjalla One', fontSize: 20}, vAxis:{format: '$#,###k', textStyle:{fontName: 'Fjalla One', fontSize: 11}}}; balanceChartElement=new google.visualization.LineChart(document.getElementById('balance-chart')); balanceChartElement.draw(balanceTable, baseOptions);}}google.charts.load('current',{'packages':['corechart']}); google.charts.setOnLoadCallback(chartReady); /* Update on load */ updateResults();}});</script>
